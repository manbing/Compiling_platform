symbols

CONT%(cn)d_TYPE_LINUX		'Linux Container'	text
Virtualized linux container.
.

CONT%(cn)d_TYPE_BAREMETAL	'Baremetal Container'	text
Baremetal containers.
These containers contain various demos describing the usage of various system calls, accessing devices etc.
.

CONT%(cn)d_TYPE_POSIX		'POSIX Container'	text
Posix container displaying a real posix system running over the hypervisor.
.

CONT%(cn)d_OPT_NAME		'Project Name'		text
Project name for container%(cn)d in this build.
.

CONTAINERS              'Number of containers'		text
Number of containers to be configured.

The maximum number of containers that can be configured is set to 4.
.


CONT%(cn)d_PAGER_PHYSMEM_REGIONS	'Container %(cn)d Number of Physical Regions'		text
Number of physical memory regions alloted to container%(cn)d.

A maximum of 4 physical memory regions can be alloted to each container.
.

CONT%(cn)d_PAGER_PHYS0_START		'Container %(cn)d Pager Physical Region 0 Start Address'	text
Start address of physical memory region 0 for container%(cn)d.
.

CONT%(cn)d_PAGER_PHYS0_END		'Container %(cn)d Pager Physical Region 0 End Address'	text
End address of physical memory region 0 for container%(cn)d.
.

CONT%(cn)d_PAGER_PHYS1_START		'Container %(cn)d Pager Physical Region 1 Start Address'	text
Start address of physical memory region 1 for container%(cn)d.
.

CONT%(cn)d_PAGER_PHYS1_END		'Container %(cn)d Pager Physical Region 1 End Address'	text
End address of physical memory region 1 for container%(cn)d.
.

CONT%(cn)d_PAGER_PHYS2_START		'Container %(cn)d Pager Physical Region 2 Start Address'	text
Start address of physical memory region 2 for container%(cn)d.
.

CONT%(cn)d_PAGER_PHYS2_END		'Container %(cn)d Pager Physical Region 2 End Address'	text
End address of physical memory region 2 for container%(cn)d.
.

CONT%(cn)d_PAGER_PHYS3_START		'Container %(cn)d Pager Physical Region 3 Start Address'	text
Start address of physical memory region 3 for container%(cn)d.
.

CONT%(cn)d_PAGER_PHYS3_END		'Container %(cn)d Pager Physical Region 3 End Address'	text
End address of physical memory region 3 for container%(cn)d.
.

symbols
CONT%(cn)d_PAGER_VIRTMEM_REGIONS	'Container %(cn)d Number of Virtual Regions'		text
Number of virtual memory regions alloted to container%(cn)d.

A maximum of 6 virtual memory regions can be alloted to each container.
.

CONT%(cn)d_PAGER_VIRT0_START	'Container %(cn)d Pager Virtual Region 0 Start Address'		text
Start address of virtual memory region 0 for container%(cn)d.
.

CONT%(cn)d_PAGER_VIRT0_END	'Container %(cn)d Pager Virtual Region 0 End Address'			text
End address of virtual memory region 0 for container%(cn)d.
.

CONT%(cn)d_PAGER_VIRT1_START	'Container %(cn)d Pager Virtual Region 1 Start Address'		text
Start address of virtual memory region 1 for container%(cn)d.
.

CONT%(cn)d_PAGER_VIRT1_END	'Container %(cn)d Pager Virtual Region 1 End Address'			text
End address of virtual memory region 1 for container%(cn)d.
.

CONT%(cn)d_PAGER_VIRT2_START	'Container %(cn)d Pager Virtual Region 2 Start Address'		text
Start address of virtual memory region 2 for container%(cn)d.
.

CONT%(cn)d_PAGER_VIRT2_END	'Container %(cn)d Pager Virtual Region 2 End Address'			text
End address of virtual memory region 2 for container%(cn)d.
.

CONT%(cn)d_PAGER_VIRT3_START	'Container %(cn)d Pager Virtual Region 3 Start Address'		text
Start address of virtual memory region 3 for container%(cn)d.
.

CONT%(cn)d_PAGER_VIRT3_END	'Container %(cn)d Pager Virtual Region 3 End Address'			text
End address of virtual memory region 3 for container%(cn)d.
.

CONT%(cn)d_PAGER_VIRT4_START	'Container %(cn)d Pager Virtual Region 4 Start Address'		text
Start address of virtual memory region 4 for container%(cn)d.
.

CONT%(cn)d_PAGER_VIRT4_END	'Container %(cn)d Pager Virtual Region 4 End Address'			text
End address of virtual memory region 4 for container%(cn)d.
.

CONT%(cn)d_PAGER_VIRT5_START	'Container %(cn)d Pager Virtual Region 5 Start Address'		text
Start address of virtual memory region 5 for container%(cn)d.
.

CONT%(cn)d_PAGER_VIRT5_END	'Container %(cn)d Pager Virtual Region 5 End Address'			text
End address of virtual memory region 5 for container%(cn)d.
.

# FIXME: We dont need to pass PAGER_LMA and PAGER_VMA to config.h now
# as we are using them just to derive other symbols, in this file only
CONT%(cn)d_PAGER_LMA		'Container %(cn)d Pager LMA'				text
Physical memory address for loading the pager of container%(cn)d.
.

CONT%(cn)d_PAGER_VMA		'Container %(cn)d Pager VMA'				text
Virtual memory address for loading the pager of container%(cn)d.
.

CONT%(cn)d_PAGER_SHM_START	'Container %(cn)d Shared Mappings Region Start'		text
Start of virtual memory region to be used for shared mappings for container%(cn)d.
.

CONT%(cn)d_PAGER_SHM_END	'Container %(cn)d Shared Mappings Region End'		text
End of virtual memory region to be used for shared mappings for container%(cn)d.
.

CONT%(cn)d_PAGER_TASK_START	'Container %(cn)d Task Address Space Region Start'	text
Start of virtual memory region to be used for address spaces generation
for the new tasks created in container%(cn)d.
.

CONT%(cn)d_PAGER_TASK_END	'Container %(cn)d Task Address Space Region End'	text
End of virtual memory region to be used for address spaces generation
for the new tasks created in container%(cn)d.
.

CONT%(cn)d_PAGER_UTCB_START	'Container %(cn)d UTCB Mappings Region Start'		text
Start of virtual memory region to be used for allocating utcbs of threads in container%(cn)d.
.

CONT%(cn)d_PAGER_UTCB_END	'Container %(cn)d UTCB Mappings Region End'		text
End of virtual memory region to be used for allocating utcbs of threads in container%(cn)d.
.

CONT%(cn)d_LINUX_ZRELADDR       'Container %(cn)d Linux ZRELADDR Parameter'		text
ZRELADDR parameter of linux kernel.

This refers to the physical memory address where uncompressed linux kernel will be loaded.
This should be within the physical memory regions assigned to linux container.
.

CONT%(cn)d_LINUX_PAGE_OFFSET	'Container %(cn)d Linux PAGE_OFFSET Parameter'		text
PAGE_OFFSET parameter of linux kernel.

This refers to the virtual memory address from where the virtual memory region
of linux kernel starts.
This should be within the virtual memory regions assigned to linux container.
.

CONT%(cn)d_LINUX_PHYS_OFFSET	'Container %(cn)d Linux PHYS_OFFSET Parameter'		text
PHYS_OFFSET parameter of linux kernel.

This refers to the beginning address of physical memory region avaialable to linux container/kernel.
.

CONT%(cn)d_LINUX_ROOTFS_ADDRESS	'Container %(cn)d Linux ROOTFS Address'			text
Virtual memory address where root filesystem, to be used by linux kernel, will be located.

This should be within the range of virtual memory regions assigned to linux container/kernel.
.

default CONT%(cn)d_PAGER_LMA	 	from CONT%(cn)d_PAGER_PHYS0_START
default CONT%(cn)d_PAGER_VMA	 	from CONT%(cn)d_PAGER_VIRT0_START
default CONT%(cn)d_PAGER_SHM_START	from CONT%(cn)d_PAGER_VIRT1_START
default CONT%(cn)d_PAGER_SHM_END	from CONT%(cn)d_PAGER_VIRT1_END
default CONT%(cn)d_PAGER_TASK_START	from CONT%(cn)d_PAGER_VIRT2_START
default CONT%(cn)d_PAGER_TASK_END	from CONT%(cn)d_PAGER_VIRT2_END
default CONT%(cn)d_PAGER_UTCB_START	from CONT%(cn)d_PAGER_VIRT3_START
default CONT%(cn)d_PAGER_UTCB_END	from CONT%(cn)d_PAGER_VIRT3_END
default CONT%(cn)d_LINUX_ZRELADDR	from (CONT%(cn)d_LINUX_PHYS_OFFSET + 0x8000)
default CONT%(cn)d_LINUX_PAGE_OFFSET 	from CONT%(cn)d_PAGER_VIRT0_START
default CONT%(cn)d_LINUX_PHYS_OFFSET 	from CONT%(cn)d_PAGER_PHYS0_START
default CONT%(cn)d_LINUX_ROOTFS_ADDRESS	from (CONT%(cn)d_LINUX_PHYS_OFFSET + 0x500000)

default CONT%(cn)d_PAGER_VIRTMEM_REGIONS from (CONT%(cn)d_TYPE_POSIX==y ? 4 : 1)
default CONT%(cn)d_PAGER_PHYSMEM_REGIONS from 1

# Define limits on virtual and physical memory regions of a _single_ container 0. Too much code!
when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 2 suppress CONT%(cn)d_PAGER_VIRT1_START CONT%(cn)d_PAGER_VIRT1_END
when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 2 suppress CONT%(cn)d_PAGER_VIRT2_START CONT%(cn)d_PAGER_VIRT2_END
when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 2 suppress CONT%(cn)d_PAGER_VIRT3_START CONT%(cn)d_PAGER_VIRT3_END
when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 2 suppress CONT%(cn)d_PAGER_VIRT4_START CONT%(cn)d_PAGER_VIRT4_END
when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 2 suppress CONT%(cn)d_PAGER_VIRT5_START CONT%(cn)d_PAGER_VIRT5_END

when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 3 suppress CONT%(cn)d_PAGER_VIRT2_START CONT%(cn)d_PAGER_VIRT2_END
when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 3 suppress CONT%(cn)d_PAGER_VIRT3_START CONT%(cn)d_PAGER_VIRT3_END
when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 3 suppress CONT%(cn)d_PAGER_VIRT4_START CONT%(cn)d_PAGER_VIRT4_END
when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 3 suppress CONT%(cn)d_PAGER_VIRT5_START CONT%(cn)d_PAGER_VIRT5_END

when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 4 suppress CONT%(cn)d_PAGER_VIRT3_START CONT%(cn)d_PAGER_VIRT3_END
when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 4 suppress CONT%(cn)d_PAGER_VIRT4_START CONT%(cn)d_PAGER_VIRT4_END
when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 4 suppress CONT%(cn)d_PAGER_VIRT5_START CONT%(cn)d_PAGER_VIRT5_END

when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 5 suppress CONT%(cn)d_PAGER_VIRT4_START CONT%(cn)d_PAGER_VIRT4_END
when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 5 suppress CONT%(cn)d_PAGER_VIRT5_START CONT%(cn)d_PAGER_VIRT5_END

when CONT%(cn)d_PAGER_VIRTMEM_REGIONS < 6 suppress CONT%(cn)d_PAGER_VIRT5_START CONT%(cn)d_PAGER_VIRT5_END


when CONT%(cn)d_PAGER_PHYSMEM_REGIONS < 2 suppress CONT%(cn)d_PAGER_PHYS1_START CONT%(cn)d_PAGER_PHYS1_END
when CONT%(cn)d_PAGER_PHYSMEM_REGIONS < 2 suppress CONT%(cn)d_PAGER_PHYS2_START CONT%(cn)d_PAGER_PHYS2_END
when CONT%(cn)d_PAGER_PHYSMEM_REGIONS < 2 suppress CONT%(cn)d_PAGER_PHYS3_START CONT%(cn)d_PAGER_PHYS3_END

when CONT%(cn)d_PAGER_PHYSMEM_REGIONS < 3 suppress CONT%(cn)d_PAGER_PHYS2_START CONT%(cn)d_PAGER_PHYS2_END
when CONT%(cn)d_PAGER_PHYSMEM_REGIONS < 3 suppress CONT%(cn)d_PAGER_PHYS3_START CONT%(cn)d_PAGER_PHYS3_END

when CONT%(cn)d_PAGER_PHYSMEM_REGIONS < 4 suppress CONT%(cn)d_PAGER_PHYS3_START CONT%(cn)d_PAGER_PHYS3_END

# We assume kernel uses 0x0 - 0x40000 physical RAM.
# Physical Regions for containers should start after kernel.
require CONT%(cn)d_PAGER_PHYS0_START >= 0x40000
require CONT%(cn)d_PAGER_PHYS1_START >= 0x40000
require CONT%(cn)d_PAGER_PHYS2_START >= 0x40000
require CONT%(cn)d_PAGER_PHYS3_START >= 0x40000

# TODO: We can add check for end address of physical region to be
# less than RAM SIZE, need to find out RAM SIZE?

# Rules for Linux kernel parameters
require CONT%(cn)d_LINUX_ZRELADDR > CONT%(cn)d_LINUX_PHYS_OFFSET + 0x8000

# TODO: Do we want to check if PAGER_LMA/VMA lies in allocated memory regions
default CONT%(cn)d_PAGER_PHYS0_START from ((%(cn)d == 0 ? 0x100000 : (0x100000 + %(cn)d * 0x1000000)) + RAM_BASE_PLAT)
default	CONT%(cn)d_PAGER_PHYS0_END	from (CONT%(cn)d_PAGER_PHYS0_START + 0xD00000)
default CONT%(cn)d_PAGER_PHYS1_START	from CONT%(cn)d_PAGER_PHYS0_END
default CONT%(cn)d_PAGER_PHYS1_END	from (CONT%(cn)d_PAGER_PHYS1_START + 0x100000)
default CONT%(cn)d_PAGER_PHYS2_START	from CONT%(cn)d_PAGER_PHYS1_END
default CONT%(cn)d_PAGER_PHYS2_END	from (CONT%(cn)d_PAGER_PHYS2_START + 0x100000)
default CONT%(cn)d_PAGER_PHYS3_START	from CONT%(cn)d_PAGER_PHYS2_END
default CONT%(cn)d_PAGER_PHYS3_END	from (CONT%(cn)d_PAGER_PHYS3_START + 0x100000)

default CONT%(cn)d_PAGER_VIRT0_START	from (%(cn)d == 0 ? 0xa0000000 : (0xa0000000 + %(cn)d * 0x10000000))
default CONT%(cn)d_PAGER_VIRT0_END	from (CONT%(cn)d_PAGER_VIRT0_START + 0x10000000)
default CONT%(cn)d_PAGER_VIRT1_START	from (%(cn)d == 0 ? 0x80000000 : (0x80000000 + %(cn)d * 0x8000000))
default CONT%(cn)d_PAGER_VIRT1_END	from (CONT%(cn)d_PAGER_VIRT1_START + 0x8000000)
default CONT%(cn)d_PAGER_VIRT2_START	from (%(cn)d == 0 ? 0x40000000 : (0x40000000 + %(cn)d * 0x10000000))
default CONT%(cn)d_PAGER_VIRT2_END	from (CONT%(cn)d_PAGER_VIRT2_START + 0x10000000)
default CONT%(cn)d_PAGER_VIRT3_START	from (%(cn)d == 0 ? 0xf8100000 : (0xf8100000 + %(cn)d * 0x100000))
default CONT%(cn)d_PAGER_VIRT3_END	from (CONT%(cn)d_PAGER_VIRT3_START + 0x100000)
default CONT%(cn)d_PAGER_VIRT4_START	from (%(cn)d == 0 ? 0x10000000 : (0x10000000 + %(cn)d * 0x10000000))
default CONT%(cn)d_PAGER_VIRT4_END	from (CONT%(cn)d_PAGER_VIRT4_START + 0x10000000)
default CONT%(cn)d_PAGER_VIRT5_START	from 0xe0000000
default CONT%(cn)d_PAGER_VIRT5_END	from 0xf0000000

default CONT%(cn)d_OPT_NAME from
(CONT%(cn)d_TYPE_LINUX==y) ? "linux%(cn)d" :
((CONT%(cn)d_TYPE_POSIX==y) ? "posix%(cn)d" :
((CONT%(cn)d_BAREMETAL_PROJ_HELLO_WORLD==y) ? "hello_world%(cn)d" :
((CONT%(cn)d_BAREMETAL_PROJ_THREADS_DEMO==y) ? "thread_demo%(cn)d" :
((CONT%(cn)d_BAREMETAL_PROJ_TEST_SUITE==y) ? "test_suite%(cn)d" :
((CONT%(cn)d_BAREMETAL_PROJ_UART_SERVICE==y) ? "uart_service%(cn)d" :
((CONT%(cn)d_BAREMETAL_PROJ_KMI_SERVICE==y) ? "kmi_service%(cn)d" :
((CONT%(cn)d_BAREMETAL_PROJ_MUTEX_DEMO==y) ? "mutex_demo%(cn)d" :
((CONT%(cn)d_BAREMETAL_PROJ_IPC_DEMO==y) ? "ipc_demo%(cn)d" :
((CONT%(cn)d_BAREMETAL_PROJ_TIMER_SERVICE==y) ? "timer_service%(cn)d" : "empty%(cn)d")))))))))

when CONT%(cn)d_TYPE_LINUX==y suppress cont%(cn)d_pager_linker_params
unless CONT%(cn)d_TYPE_POSIX==y suppress cont%(cn)d_posix_pager_params
unless CONT%(cn)d_TYPE_LINUX==y suppress cont%(cn)d_linux_pager_params
unless CONT%(cn)d_TYPE_BAREMETAL==y suppress cont%(cn)d_baremetal_params

# derive symbols, for cinfo.c, depending on the type of container selected
derive CONT%(cn)d_PAGER_LOAD_ADDR from (CONT%(cn)d_TYPE_LINUX==y) ? CONT%(cn)d_LINUX_PHYS_OFFSET : CONT%(cn)d_PAGER_LMA
derive CONT%(cn)d_PAGER_VIRT_ADDR from (CONT%(cn)d_TYPE_LINUX==y) ? CONT%(cn)d_LINUX_PAGE_OFFSET : CONT%(cn)d_PAGER_VMA
derive CONT%(cn)d_START_PC_ADDR from (CONT%(cn)d_TYPE_LINUX != y) ? CONT%(cn)d_PAGER_VMA : (CONT%(cn)d_LINUX_PAGE_OFFSET + CONT%(cn)d_LINUX_ZRELADDR - CONT%(cn)d_LINUX_PHYS_OFFSET)

symbols
cont%(cn)d_menu		'Container %(cn)d Parameters'					text
List of parameters associated with container%(cn)d.

All parameters are provided with default values, appropriate for defualt configurations of
various containers.
.

cont%(cn)d_physmem_list	'Container %(cn)d Pager Physical Memory Regions (Capabilities)'	text
List of physical memory regions to be used by container%(cn)d.
.

cont%(cn)d_virtmem_list	'Container %(cn)d Pager Virtual Memory Regions (Capabilities)'	text
List of virtual memory regions to be used by container%(cn)d.
.

container%(cn)d_type	'Container %(cn)d Type'						text
Container type.
.

#cont%(cn)d_pager_params	'Container %(cn)d Pager Parameters'			text
#Configuration parameters associated with container%(cn)d pager.
#.

container%(cn)d_options	'Container %(cn)d Options'					text
Configuration parameters associated with container%(cn)d.
.

cont%(cn)d_linux_pager_params	'Container %(cn)d Linux Pager Parameters'		text
Configuration parameters associated with pager of container%(cn)d.
.

cont%(cn)d_pager_linker_params	'Container %(cn)d Pager Linker Parameters'		text
Pager's linker parameters. These allow shifting the pager image in physical and virtual
address spaces.

For correct functioning, the LMA parameter should match with one of the
defined physical memory capabilities.

The VMA parameter should match with one of the defined virtual memory
capabilities.
.

cont%(cn)d_posix_pager_params	'Container %(cn)d POSIX Pager Parameters'		text
Configuration parameters associated with pager of container%(cn)d.
.

cont%(cn)d_baremetal_params		'Baremetal Project Type'			text
Select the type of sources to include in this baremetal container
.

CONT%(cn)d_BAREMETAL_PROJ_EMPTY		'Empty Project'					text
Empty container.

This includes the bare minimum sources required to build a container.
.

CONT%(cn)d_BAREMETAL_PROJ_HELLO_WORLD	'Hello World'					text
Hello world container

This includes a main.c with a hello world message printed on the console.
.

CONT%(cn)d_BAREMETAL_PROJ_THREADS_DEMO	'Thread Library Demo'				text
Baremetal container demonstrating usage of libl4 thread library and associated API.
.

CONT%(cn)d_BAREMETAL_PROJ_TEST_SUITE   	'Microkernel Tests'				text
Baremetal container demonstrating some API usage cases and tests.
.

CONT%(cn)d_BAREMETAL_PROJ_UART_SERVICE	'UART Service'					text
Baremetal container demonstrating usage of uart devices.
.

CONT%(cn)d_BAREMETAL_PROJ_TIMER_SERVICE 'Timer Service'					text
Baremetal container displaying usage of timer devices.
.

CONT%(cn)d_BAREMETAL_PROJ_KMI_SERVICE 	'Keyboard Mouse Service'			text
Baremetal container displaying usage of mouse and keyboard devices.
.

CONT%(cn)d_BAREMETAL_PROJ_MUTEX_DEMO	'Mutex Demo'					text
Baremetal container displaying usage of mutexes.
.

CONT%(cn)d_BAREMETAL_PROJ_IPC_DEMO	'IPC Demo'					text
Baremetal container displaying usage of ipc calls.
.


choices cont%(cn)d_baremetal_params
	CONT%(cn)d_BAREMETAL_PROJ_EMPTY
	CONT%(cn)d_BAREMETAL_PROJ_HELLO_WORLD
	CONT%(cn)d_BAREMETAL_PROJ_THREADS_DEMO
	CONT%(cn)d_BAREMETAL_PROJ_TEST_SUITE
	CONT%(cn)d_BAREMETAL_PROJ_UART_SERVICE
	CONT%(cn)d_BAREMETAL_PROJ_TIMER_SERVICE
	CONT%(cn)d_BAREMETAL_PROJ_KMI_SERVICE
	CONT%(cn)d_BAREMETAL_PROJ_MUTEX_DEMO
	CONT%(cn)d_BAREMETAL_PROJ_IPC_DEMO
	default CONT%(cn)d_BAREMETAL_PROJ_EMPTY

menu cont%(cn)d_pager_linker_params
	CONT%(cn)d_PAGER_LMA@
	CONT%(cn)d_PAGER_VMA@

menu cont%(cn)d_posix_pager_params
	CONT%(cn)d_PAGER_SHM_START@
	CONT%(cn)d_PAGER_SHM_END@
	CONT%(cn)d_PAGER_TASK_START@
	CONT%(cn)d_PAGER_TASK_END@
	CONT%(cn)d_PAGER_UTCB_START@
	CONT%(cn)d_PAGER_UTCB_END@

menu cont%(cn)d_linux_pager_params
	CONT%(cn)d_LINUX_PHYS_OFFSET@
	CONT%(cn)d_LINUX_ZRELADDR@
	CONT%(cn)d_LINUX_ROOTFS_ADDRESS@
	CONT%(cn)d_LINUX_PAGE_OFFSET@

menu cont%(cn)d_virtmem_list
	CONT%(cn)d_PAGER_VIRTMEM_REGIONS%
	CONT%(cn)d_PAGER_VIRT0_START@
	CONT%(cn)d_PAGER_VIRT0_END@
	CONT%(cn)d_PAGER_VIRT1_START@
	CONT%(cn)d_PAGER_VIRT1_END@
	CONT%(cn)d_PAGER_VIRT2_START@
	CONT%(cn)d_PAGER_VIRT2_END@
	CONT%(cn)d_PAGER_VIRT3_START@
	CONT%(cn)d_PAGER_VIRT3_END@
	CONT%(cn)d_PAGER_VIRT4_START@
	CONT%(cn)d_PAGER_VIRT4_END@
	CONT%(cn)d_PAGER_VIRT5_START@
	CONT%(cn)d_PAGER_VIRT5_END@

menu cont%(cn)d_physmem_list
	CONT%(cn)d_PAGER_PHYSMEM_REGIONS%
	CONT%(cn)d_PAGER_PHYS0_START@
	CONT%(cn)d_PAGER_PHYS0_END@
	CONT%(cn)d_PAGER_PHYS1_START@
	CONT%(cn)d_PAGER_PHYS1_END@
	CONT%(cn)d_PAGER_PHYS2_START@
	CONT%(cn)d_PAGER_PHYS2_END@
	CONT%(cn)d_PAGER_PHYS3_START@
	CONT%(cn)d_PAGER_PHYS3_END@

#
# Settings for Custom Capabilities
#
choices cont%(cn)d_pager_cap_custom0_type
	CONT%(cn)d_PAGER_CAP_CUSTOM0_IPC_TYPE
	default CONT%(cn)d_PAGER_CAP_CUSTOM0_IPC_TYPE
choices cont%(cn)d_pager_cap_custom1_type
	CONT%(cn)d_PAGER_CAP_CUSTOM1_IPC_TYPE
	default CONT%(cn)d_PAGER_CAP_CUSTOM1_IPC_TYPE
choices cont%(cn)d_pager_cap_custom2_type
	CONT%(cn)d_PAGER_CAP_CUSTOM2_IPC_TYPE
	default CONT%(cn)d_PAGER_CAP_CUSTOM2_IPC_TYPE
choices cont%(cn)d_pager_cap_custom3_type
	CONT%(cn)d_PAGER_CAP_CUSTOM3_IPC_TYPE
	default CONT%(cn)d_PAGER_CAP_CUSTOM3_IPC_TYPE

default CONT%(cn)d_PAGER_CAP_CUSTOM0_USE	from n
default CONT%(cn)d_PAGER_CAP_CUSTOM1_USE	from n
default CONT%(cn)d_PAGER_CAP_CUSTOM2_USE	from n
default CONT%(cn)d_PAGER_CAP_CUSTOM3_USE	from n

menu cont%(cn)d_pager_cap_custom0
	CONT%(cn)d_PAGER_CAP_CUSTOM0_USE
	cont%(cn)d_pager_cap_custom0_type
	CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
	CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
	CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
	CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
	CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET%

menu cont%(cn)d_pager_cap_custom1
	CONT%(cn)d_PAGER_CAP_CUSTOM1_USE
	cont%(cn)d_pager_cap_custom1_type
	CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
	CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
	CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
	CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
	CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET%

menu cont%(cn)d_pager_cap_custom2
	CONT%(cn)d_PAGER_CAP_CUSTOM2_USE
	cont%(cn)d_pager_cap_custom2_type
	CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
	CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
	CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
	CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
	CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET%

menu cont%(cn)d_pager_cap_custom3
	CONT%(cn)d_PAGER_CAP_CUSTOM3_USE
	cont%(cn)d_pager_cap_custom3_type
	CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
	CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
	CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
	CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
	CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET%

choicegroup CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
	    CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
	    CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
	    CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
	    default CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER from y

choicegroup CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
	    CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
	    CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
	    CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
	    default CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER from y

choicegroup CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
	    CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
	    CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
	    CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
	    default CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER from y

choicegroup CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
	    CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
	    CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
	    CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
	    default CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER from y

when CONT%(cn)d_PAGER_CAP_CUSTOM0_USE == n
	suppress cont%(cn)d_pager_cap_custom0_type
		 CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
		 CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
		 CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET

when CONT%(cn)d_PAGER_CAP_CUSTOM1_USE == n
	suppress cont%(cn)d_pager_cap_custom1_type
		 CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
		 CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
		 CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET

when CONT%(cn)d_PAGER_CAP_CUSTOM2_USE == n
	suppress cont%(cn)d_pager_cap_custom2_type
		 CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
		 CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
		 CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET

when CONT%(cn)d_PAGER_CAP_CUSTOM3_USE == n
	suppress cont%(cn)d_pager_cap_custom3_type
		 CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
		 CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
		 CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET

when CONT%(cn)d_PAGER_CAP_CUSTOM0_IPC_TYPE == n
	suppress CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
		 CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
		 CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET

when CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER or
     CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET

when CONT%(cn)d_PAGER_CAP_CUSTOM1_IPC_TYPE == n
	suppress CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
		 CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
		 CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET

when CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER or
     CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET

when CONT%(cn)d_PAGER_CAP_CUSTOM2_IPC_TYPE == n
	suppress CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
		 CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
		 CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET

when CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER or
     CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET

when CONT%(cn)d_PAGER_CAP_CUSTOM3_IPC_TYPE == n
	suppress CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
		 CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
		 CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
		 CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET

when CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER or
     CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET

default CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET		from 0
default CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET		from 0
default CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET		from 0
default CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET		from 0

# Symbols for Custom Capabilities
symbols

#
# CUSTOM CAPABILITY 0
#
CONT%(cn)d_PAGER_CAP_CUSTOM0_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont%(cn)d_pager_cap_custom0_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT%(cn)d_PAGER_CAP_CUSTOM0_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT%(cn)d_PAGER_CAP_CUSTOM0_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

#
# CUSTOM CAPABILITY 1
#
CONT%(cn)d_PAGER_CAP_CUSTOM1_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont%(cn)d_pager_cap_custom1_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT%(cn)d_PAGER_CAP_CUSTOM1_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT%(cn)d_PAGER_CAP_CUSTOM1_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.


#
# CUSTOM CAPABILITY 2
#
CONT%(cn)d_PAGER_CAP_CUSTOM2_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont%(cn)d_pager_cap_custom2_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT%(cn)d_PAGER_CAP_CUSTOM2_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT%(cn)d_PAGER_CAP_CUSTOM2_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

#
# CUSTOM CAPABILITY 3
#
CONT%(cn)d_PAGER_CAP_CUSTOM3_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont%(cn)d_pager_cap_custom3_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT%(cn)d_PAGER_CAP_CUSTOM3_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT%(cn)d_PAGER_CAP_CUSTOM3_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

# Symbols for Generic Capabilities
symbols
CONT%(cn)d_PAGER_CAP_IPC_USE					'Enable this Capability'			text
Enable/Disable this capability.
.

CONT%(cn)d_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER 		'Capability Targets Current Container'		text
Capability targets current container, including all spaces and threads present inside this container.
.

CONT%(cn)d_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE 		'Capability Targets Current Pager`s Space'	text
Capability targets space associated with pager of this container.
.

CONT%(cn)d_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER		'Capability Targets Another Container'		text
Capability targets pager of another container.
.

CONT%(cn)d_PAGER_CAP_IPC_TARGET_OTHER_PAGER			'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container.
.

CONT%(cn)d_PAGER_CAP_IPC_TARGET				'Enter Container ID'				text
Container ID of the container/pager targeted by this capabilty.
.

CONT%(cn)d_PAGER_CAP_IRQCTRL_USE				'Enable this Capability'			text
Enable/Disable this capability.
.

CONT%(cn)d_CAP_IPC_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT%(cn)d_CAP_IPC_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT%(cn)d_CAP_IPC_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT%(cn)d_CAP_IPC_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT%(cn)d_CAP_IPC_USE					'Enable this Capability'			text
Enable/Disable this capability.
.

CONT%(cn)d_CAP_IPC_TARGET				'Enter Container ID'				text
Container ID of the container/pager targeted by this capabilty.
.

symbols
CONT%(cn)d_PAGER_CAP_THREADPOOL_SIZE	'Number of Threads'				text
Total number of threads in this pool.
.

CONT%(cn)d_PAGER_CAP_SPACEPOOL_SIZE	'Number of Address Spaces'			text
Total number of spaces in this pool.
.

CONT%(cn)d_PAGER_CAP_MAPPOOL_SIZE	'Number of PMD Mappings'			text
Total number of pmds(E.g. Middle-level Page Tables) in this pool.
.

CONT%(cn)d_PAGER_CAP_MUTEXPOOL_SIZE	'Number of Userspace Mutexes'			text
Total number of mutexes in this pool.
.

CONT%(cn)d_CAP_MUTEXPOOL_SIZE	'Number of Userspace Mutexes'			text
Total number of mutexes in this pool.
.

CONT%(cn)d_PAGER_CAP_THREADPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT%(cn)d_PAGER_CAP_SPACEPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT%(cn)d_PAGER_CAP_MAPPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT%(cn)d_PAGER_CAP_MUTEXPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT%(cn)d_CAP_MUTEXPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

cont%(cn)d_pager_cap_threadpool	'Container %(cn)d Thread Pool Capability'		text
It controls the number of threads allowed to be created in the container.
.

cont%(cn)d_pager_cap_spacepool	'Container %(cn)d Space Pool Capability'		text
It controls the number of spaces allowed to be created in the container.
.

cont%(cn)d_pager_cap_mutexpool	'Container %(cn)d Mutex Pool Capability'		text
It controls the number of mutex allowed to be created and used in the container.
.

cont%(cn)d_cap_mutexpool	'Container %(cn)d Mutex Pool Capability'		text
It controls the number of mutex allowed to be created and used in the container.
.

cont%(cn)d_pager_cap_mappool		'Container %(cn)d Map Pool Capability'			text
It defines the mapping pools/caches for various kinds of structures used in the container.
.


cont%(cn)d_pager_cap_ipc		'Container %(cn)d IPC Capability'			text
Capability associated with inter-container and intra-container ipc permissions.
.

cont%(cn)d_cap_ipc		'Container %(cn)d IPC Capability'			text
Capability associated with inter-container and intra-container ipc permissions.
.

cont%(cn)d_pager_cap_irqctrl		'Container %(cn)d IRQ Control Capability'		text
Capability associated with irq control features and permissions.
.

cont%(cn)d_pager_cap_custom0 		'Container %(cn)d Custom Capability 0 Parameters'	text
Custom capability.
.

cont%(cn)d_pager_cap_custom1 		'Container %(cn)d Custom Capability 1 Parameters'	text
Custom capability.
.

cont%(cn)d_pager_cap_custom2 		'Container %(cn)d Custom Capability 2 Parameters'	text
Custom capability.
.

cont%(cn)d_pager_cap_custom3		'Container %(cn)d Custom Capability 3 Parameters'	text
Custom capability.
.

cont%(cn)d_pager_capability_list	'Container %(cn)d Pager Capabilities'			text
List of capabilities associated with Container%(cn)d's Pager task
.

cont%(cn)d_capability_list	'Container %(cn)d Global Capabilities'		text
List of capabilities globally associated with all tasks inside Container%(cn)d.

These capabilities can be used by tasks inside Container%(cn)d.
.


default CONT%(cn)d_PAGER_CAP_THREADPOOL_SIZE	from 64
default CONT%(cn)d_PAGER_CAP_SPACEPOOL_SIZE	from 64
default CONT%(cn)d_PAGER_CAP_MAPPOOL_SIZE	from 800
default CONT%(cn)d_PAGER_CAP_MUTEXPOOL_SIZE	from 100
default CONT%(cn)d_CAP_MUTEXPOOL_SIZE	from 100

default CONT%(cn)d_PAGER_CAP_THREADPOOL_USE	from y
default CONT%(cn)d_PAGER_CAP_SPACEPOOL_USE	from y
default CONT%(cn)d_PAGER_CAP_MAPPOOL_USE	from y
default CONT%(cn)d_PAGER_CAP_MUTEXPOOL_USE	from y
default CONT%(cn)d_CAP_MUTEXPOOL_USE	from y

# Use Rules for Generic Capabilities
when CONT%(cn)d_PAGER_CAP_THREADPOOL_USE == n
	suppress CONT%(cn)d_PAGER_CAP_THREADPOOL_SIZE
when CONT%(cn)d_PAGER_CAP_SPACEPOOL_USE == n
	suppress CONT%(cn)d_PAGER_CAP_SPACEPOOL_SIZE
when CONT%(cn)d_PAGER_CAP_MAPPOOL_USE == n
	suppress CONT%(cn)d_PAGER_CAP_MAPPOOL_SIZE
when CONT%(cn)d_PAGER_CAP_MUTEXPOOL_USE == n
	suppress CONT%(cn)d_PAGER_CAP_MUTEXPOOL_SIZE

when CONT%(cn)d_CAP_MUTEXPOOL_USE == n
	suppress CONT%(cn)d_CAP_MUTEXPOOL_SIZE

when CONT%(cn)d_PAGER_CAP_IPC_USE == n
	suppress CONT%(cn)d_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
		 CONT%(cn)d_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
		 CONT%(cn)d_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
		 CONT%(cn)d_PAGER_CAP_IPC_TARGET_OTHER_PAGER

when CONT%(cn)d_CAP_IPC_USE == n
	suppress CONT%(cn)d_CAP_IPC_TARGET_CURRENT_CONTAINER
		 CONT%(cn)d_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
		 CONT%(cn)d_CAP_IPC_TARGET_OTHER_CONTAINER
		 CONT%(cn)d_CAP_IPC_TARGET_OTHER_PAGER

when CONT%(cn)d_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER or
     CONT%(cn)d_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT%(cn)d_PAGER_CAP_IPC_TARGET

when CONT%(cn)d_CAP_IPC_TARGET_CURRENT_CONTAINER or
     CONT%(cn)d_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT%(cn)d_CAP_IPC_TARGET

choicegroup CONT%(cn)d_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
	    CONT%(cn)d_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
	    CONT%(cn)d_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	    CONT%(cn)d_PAGER_CAP_IPC_TARGET_OTHER_PAGER
	    default CONT%(cn)d_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER from y

choicegroup CONT%(cn)d_CAP_IPC_TARGET_CURRENT_CONTAINER
	    CONT%(cn)d_CAP_IPC_TARGET_OTHER_CONTAINER
	    CONT%(cn)d_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	    CONT%(cn)d_CAP_IPC_TARGET_OTHER_PAGER
	    default CONT%(cn)d_CAP_IPC_TARGET_CURRENT_CONTAINER from y

default CONT%(cn)d_PAGER_CAP_IPC_USE		from y
default CONT%(cn)d_PAGER_CAP_IRQCTRL_USE	from y
default CONT%(cn)d_CAP_IPC_USE			from y

default CONT%(cn)d_PAGER_CAP_IPC_TARGET	from 0
default CONT%(cn)d_CAP_IPC_TARGET	from 0

# Capability Menus
menu cont%(cn)d_pager_cap_irqctrl
	CONT%(cn)d_PAGER_CAP_IRQCTRL_USE

menu cont%(cn)d_pager_cap_ipc
	CONT%(cn)d_PAGER_CAP_IPC_USE
	CONT%(cn)d_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
	CONT%(cn)d_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	CONT%(cn)d_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
	CONT%(cn)d_PAGER_CAP_IPC_TARGET_OTHER_PAGER
	CONT%(cn)d_PAGER_CAP_IPC_TARGET%

menu cont%(cn)d_pager_cap_threadpool
	CONT%(cn)d_PAGER_CAP_THREADPOOL_USE
	CONT%(cn)d_PAGER_CAP_THREADPOOL_SIZE%

menu cont%(cn)d_pager_cap_spacepool
	CONT%(cn)d_PAGER_CAP_SPACEPOOL_USE
	CONT%(cn)d_PAGER_CAP_SPACEPOOL_SIZE%

menu cont%(cn)d_pager_cap_mappool
	CONT%(cn)d_PAGER_CAP_MAPPOOL_USE
	CONT%(cn)d_PAGER_CAP_MAPPOOL_SIZE%

menu cont%(cn)d_pager_cap_mutexpool
	CONT%(cn)d_PAGER_CAP_MUTEXPOOL_USE
	CONT%(cn)d_PAGER_CAP_MUTEXPOOL_SIZE%

menu cont%(cn)d_pager_capability_list
	cont%(cn)d_pager_cap_threadpool
	cont%(cn)d_pager_cap_spacepool
	cont%(cn)d_pager_cap_mutexpool
	cont%(cn)d_pager_cap_mappool
	cont%(cn)d_pager_cap_ipc
	cont%(cn)d_pager_cap_irqctrl
	cont%(cn)d_pager_cap_custom0
	cont%(cn)d_pager_cap_custom1
	cont%(cn)d_pager_cap_custom2
	cont%(cn)d_pager_cap_custom3

menu cont%(cn)d_cap_ipc
	CONT%(cn)d_CAP_IPC_USE
	CONT%(cn)d_CAP_IPC_TARGET_CURRENT_CONTAINER
	CONT%(cn)d_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	CONT%(cn)d_CAP_IPC_TARGET_OTHER_CONTAINER
	CONT%(cn)d_CAP_IPC_TARGET_OTHER_PAGER
	CONT%(cn)d_CAP_IPC_TARGET%

menu cont%(cn)d_cap_mutexpool
	CONT%(cn)d_CAP_MUTEXPOOL_USE
	CONT%(cn)d_CAP_MUTEXPOOL_SIZE%

menu cont%(cn)d_capability_list
	cont%(cn)d_cap_ipc
	cont%(cn)d_cap_mutexpool

# menu cont%(cn)d_pager_params

menu container%(cn)d_options
	CONT%(cn)d_OPT_NAME$
	cont%(cn)d_baremetal_params
#	cont%(cn)d_pager_params
	cont%(cn)d_linux_pager_params
	cont%(cn)d_pager_linker_params
	cont%(cn)d_posix_pager_params
	cont%(cn)d_physmem_list
	cont%(cn)d_virtmem_list
	cont%(cn)d_pager_capability_list
	cont%(cn)d_capability_list

choices container%(cn)d_type
	CONT%(cn)d_TYPE_BAREMETAL
	CONT%(cn)d_TYPE_POSIX
	CONT%(cn)d_TYPE_LINUX
        default CONT%(cn)d_TYPE_BAREMETAL

menu cont%(cn)d_menu
	container%(cn)d_type
	container%(cn)d_options
